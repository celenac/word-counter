{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","allWords","words","sentences","handleKeypress","bind","assertThisInitialized","event","setState","target","value","match","sortedWords","i","length","w","sortByIntProperty","split","obj","increasing","arguments","undefined","sortable","key","hasOwnProperty","push","sort","a","b","_this2","react_default","createElement","id","class","ref","onChange","map","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c139deca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) { \n    super(props);\n    this.state = {\n      text : \"\",\n      allWords : [],\n      words : [],\n      sentences : []\n    }\n    this.handleKeypress = this.handleKeypress.bind(this);\n  }\n  \n  handleKeypress(event) {\n    this.setState({\n      text:event.target.value\n    });\n    \n    let words = this.state.text.match(/\\b[-?(\\w+)?]+\\b/gi);\n    if (words) {\n      this.setState({\n        allWords : words\n      });\n    }\n\n    let sortedWords = [];\n    for (var i = 0; i < this.state.allWords.length; i++) {\n      let w = this.state.allWords[i];\n      if (w in sortedWords) {\n        sortedWords[w] += 1;\n      } else {\n        sortedWords[w] = 1;\n      }\n    }\n\n    // this.setState({\n    //   words: Object.keys(sortedWords).sort((a, b) => {return sortedWords[a] > sortedWords[b] ? -1 : 1;})\n    // })\n\n    this.setState({\n      words: this.sortByIntProperty(sortedWords, false)\n    });\n    \n    let sentences = this.state.text.split(/[.|!|?]+/g);\n    this.setState({\n      sentences: sentences\n    });\n    \n  }\n\n  sortByIntProperty(obj, increasing = true) {\n    /**\n     * Converts an object of (key, int value) pairs into a sorted array, sorted by the values\n     * Input:\n     *    obj: {k1:v1, k2:v2, k3:v3}\n     *    increasing (boolean): true if sort in increasing order\n     * Output: sorted array: [[k1, v1], [k2, v2], [k3, v3]]\n     */\n    let sortable = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        sortable.push([key, obj[key]]); // each item is an array in the format [key, value]\n      }\n    }\n\n    // sort items by value\n    if (increasing) {\n      sortable.sort((a, b) => {return a[1] < b[1] ? -1 : 1;});\n    } else {\n      sortable.sort((a, b) => {return a[1] > b[1] ? -1 : 1;});\n    }      \n    return sortable;\n  }\n  \n  \n  render(){\n    return(\n      <div id=\"app\">\n        <header class=\"App-header\">\n          <h1>Word Counter</h1>\n        </header>\n\n        <textarea id=\"maintext\" ref='mytext' onChange={(event) => this.handleKeypress(event)}>{this.state.text}</textarea>\n        \n        <div>\n          <table class=\"center\">\n            <tbody>\n              \n              <tr>\n                <td class=\"left\">\n                  Characters: \n                </td>\n                <td class=\"middle\">\n                  {this.state.text.length}\n                </td>\n              </tr>\n              <tr>\n                <td class=\"left\">\n                  Words: \n                </td>\n                <td class=\"middle\">\n                  {(this.state.allWords) ? this.state.allWords.length : 0}\n                </td>\n              </tr>\n              <tr>\n                <td class=\"left\">\n                  Sentences: \n                </td>\n                <td class=\"middle\">\n                  {(this.state.sentences.length <= 1) ? 0 : this.state.sentences.length - 1}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <p></p>\n        <div>\n          <table class=\"center\">\n            <tbody>\n              <tr>\n                <th class=\"left\">Word</th>\n                <th class=\"middle\">Frequency</th>\n              </tr>\n              {this.state.words.map(w => <tr><td class=\"left\">{w[0]}</td><td class=\"middle\">{w[1]}</td></tr>)}\n            </tbody>\n          </table>\n        </div>\n\n        <footer></footer>\n        \n        \n      </div>\n    );\n  }\n}\n  // render() {\n  //   return (\n  //     <div className=\"App\">\n  //       <header className=\"App-header\">\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //         <p>\n  //           Edit <code>src/App.js</code> and save to reload.\n  //         </p>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://reactjs.org\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Learn React\n  //         </a>\n  //       </header>\n  //     </div>\n  //   );\n  // }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}